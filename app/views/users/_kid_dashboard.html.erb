<!-- inline css -->

<style>
body {
  background-color: #E3E8EB; }
.card-dashboard {
  background-color: white;
  border-radius: 10px;
  padding: 20px;
  margin-top: 12px;
  text-align: center;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
.pocket-card-dashboard {
  background-color: #F8CE69;
  border-radius: 10px;
  padding: 12px;
  margin-top: 12px;
  text-align: center;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
.container-header {
  display: flex;
  border-bottom: :1px white; }
.card-goal {
  border-radius: 10px;
  width: 60%;
  height: 300px;
  border: 0px;
  margin-right: 12px;
  vertical-align: top;
}
.header {
  color: #505050;
  margin: auto;
  margin-left: 12px;
  font-size: 20px;
  font-weight: bold; }
.container-dashboard-button {
  display: flex;
  padding: 6px;
  padding: 12px;
}
.learning-container {
  display: flex;
}
.learning-stats {
  margin-left: 32px;
}
.row {
  margin-bottom: 0px;
}
.icon {
  width: 16px;
  height: 16px;
  border-radius: 50%; }
.icon img {
  margin-bottom: 4px;
  margin-left: 7px;
}

section {
  background-color: #E34E53;
  background-size: 30% 100%;
}
h1 {
  color: white;
}
h2 {
  margin: auto;
  margin-left: 12px;
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 12px;
  color: #505050}
h3 {
  margin: auto;
  margin-left: 0;
  font-size: 14px;
  font-weight: bold;
  color: #505050;}
h5 {
  font-size: 48px;
  color: black;
}
p {
  margin: auto;
  font-size: 14px;
  text-align: left;
  color: #505050 }
a {
  margin: auto;
  font-size: 12px;
  color: #505050;
}


</style>

<div class="container-main">
   <!-- Add these lines if you need the back button menu -->
    <div class="container-header">
      <div class="header-back">
        </button>
      </div>
      <div class="user-info d-flex">
        <div class="header-text">
          <h1 class ="header">Welcome <%= user.first_name %></h1>
        </div>
        <div class="header-avatar">
          <label for="offcanvas" class="toggler"><%= cl_image_tag current_user.avatar, crop: :fill, for: "offcanvas", class: "avatar" %></label>
        </div>
      </div>
  </div>
   <!-- End menu -->


   <div class="pocket-card-dashboard d-flex justify-content-center align-items-center">
    <div>
      <h2 style="margin-bottom: 0px;"></h2>
    </div>
    <div>
      <h5> <%= @wallet.payout_amount %>$</h5><p>In your pocket</p>
    </div>
   </div>


    <div class="card-dashboard">
      <!-- display learning progess for courses that are not comoplete -->
      <% unless @user_course.nil? %>

        <div class="learning-container">
        <% unless @user_course.complete  %>


          <div>
            <% unless @user_course.complete %>
<!--               this is the circle chart -->
              <div class="chart" data-percent="<%= @done_percentage %>">
                 <div class="chart-image" style="">
                    <img src="https://www.codecademy.com/webpack/b448a28e23c2912785c2ef6d9e37d4d5.svg" alt="">
                 </div>
              </div>
            <% end %>
          </div>


            <div class="d-flex flex-column justify-content-between learning-stats">
              <div>
                <div>
                  <p><strong><%= @course.first.name %></strong></p>
                  <p>Level <%= @user_course.last_level %>, Question <%= @user_course.last_question %></p>
                  <div class="text-left">
                    <%= link_to "RESUME >", level_question_path(@user_course.last_level, @user_course.last_question) %>
                  </div>
                </div>
              </div>
            <div>
            <div style="margin-top: 8px;" class="links">
              <div class="text-left">
                <%= link_to "SEE ALL COURSES >", categories_path %>
              </div>
            </div>
          </div>
          </div>
        <% end %>
        </div>
      <% else %>
 <!--          if no enrolled courses -->
       <div class="d-flex align-items-center">
        <div>
          <img src="https://cdn.codecademy.com/assets/components/cards/path-card/5cacbe7b3709024753e7c3ff.svg" alt="">
        </div>
        <div class="text-left" style="margin-left: 24px;">
          <p>Learn something new! </p>
                  <%= link_to "BROWSE ALL COURSES >", categories_path %>
        </div>
       </div>

      <% end %>
    </div>


<!-- GOALS -->
  <!-- Goals -->
<!--   <div class="goals-container d-flex"> -->
  <div class="dashboard-scrolling-wrapper">
    <% unless @goals.nil? %>
      <% @goals.each do |goal| %>
        <% if goal.complete %>
          <div class="card card-goal" style="background-color: #F8CE69">
        <% else %>
          <div class="card card-goal">
        <% end %>
          <div class="">
              <div class="p-2 d-flex justify-content-between align-items-center" style="margin-bottom: 16px;">
                  <div>
                    <h2 style="margin-bottom: 0; margin-left: 0"><%= goal.name %> - <%= goal.goal_price %>$ </h2>
                  </div>
                    <div class="icon">
                      <%= link_to edit_goal_path(goal.id) do %>
                        <%= image_tag "edit.jpg" %>
                      <% end %>
                    </div>
                  </div>
              </div>
              <div class="chart" data-percent="<%= @goal_percentage[goal] %>">
                <div class="chart-image">
                   <img src="<%= goal.picture %>" alt="">
                </div>
              </div>

                <% if goal.complete? %>
                  <div>
                    <div class="border-top" style="margin-top: 16px;">

                    <div class="text-center" style="width: 50%; margin-top: 16px;">
                     <h2 style="margin-left: 40px;">Congratulations!</h2>
                    </div>
                  </div>
                  </div>
                <% else %>
                  <div class="p-2 d-flex justify-content-between border-top" style="margin-top: 16px;">
                    <div class="border-right" style="width: 50%">
                     <h2 class="text-center" style="margin-left: 0px"><%= goal.goal_current_saving %>$ </h2>
                     <p class="text-center">SAVED</p>
                    </div>
                    <div style="width: 50%">
                      <h2 class="text-center" style="margin-left: 0px"><%= goal.goal_allowance %>$ </h2>
                     <p class="text-center">WEEKLY</p>
                    </div>
                  </div>
                <% end %>
                </div>
         <% end %>

        <div class="card card-goal shadow-none position-relative" style="background-color: #E3E8EB">
          <div class="icon-plus position-absolute" style="top: 40%; left: 40%;">
            <%= link_to new_wallet_goal_path(wallet.id) do %>
              <%= image_tag "plus-icon.png" %>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>

<script>
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (root['EasyPieChart'] = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['EasyPieChart'] = factory();
  }
}(this, function () {

/**
 * Renderer to render the chart on a canvas object
 * @param {DOMElement} el      DOM element to host the canvas (root of the plugin)
 * @param {object}     options options object of the plugin
 */
var CanvasRenderer = function(el, options) {
  var cachedBackground;
  var canvas = document.createElement('canvas');

  el.appendChild(canvas);

  if (typeof(G_vmlCanvasManager) === 'object') {
    G_vmlCanvasManager.initElement(canvas);
  }

  var ctx = canvas.getContext('2d');

  canvas.width = canvas.height = options.size;

  // canvas on retina devices
  var scaleBy = 1;
  if (window.devicePixelRatio > 1) {
    scaleBy = window.devicePixelRatio;
    canvas.style.width = canvas.style.height = [options.size, 'px'].join('');
    canvas.width = canvas.height = options.size * scaleBy;
    ctx.scale(scaleBy, scaleBy);
  }

  // move 0,0 coordinates to the center
  ctx.translate(options.size / 2, options.size / 2);

  // rotate canvas -90deg
  ctx.rotate((-1 / 2 + options.rotate / 180) * Math.PI);

  var radius = (options.size - options.lineWidth) / 2;
  if (options.scaleColor && options.scaleLength) {
    radius -= options.scaleLength + 2; // 2 is the distance between scale and bar
  }

  // IE polyfill for Date
  Date.now = Date.now || function() {
    return +(new Date());
  };

  /**
   * Draw a circle around the center of the canvas
   * @param {strong} color     Valid CSS color string
   * @param {number} lineWidth Width of the line in px
   * @param {number} percent   Percentage to draw (float between -1 and 1)
   */
  var drawCircle = function(color, lineWidth, percent) {
    percent = Math.min(Math.max(-1, percent || 0), 1);
    var isNegative = percent <= 0 ? true : false;

    ctx.beginPath();
    ctx.arc(0, 0, radius, 0, Math.PI * 2 * percent, isNegative);

    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;

    ctx.stroke();
  };

  /**
   * Draw the scale of the chart
   */
  var drawScale = function() {
    var offset;
    var length;

    ctx.lineWidth = 1;
    ctx.fillStyle = options.scaleColor;

    ctx.save();
    for (var i = 24; i > 0; --i) {
      if (i % 6 === 0) {
        length = options.scaleLength;
        offset = 0;
      } else {
        length = options.scaleLength * 0.6;
        offset = options.scaleLength - length;
      }
      ctx.fillRect(-options.size/2 + offset, 0, length, 1);
      ctx.rotate(Math.PI / 12);
    }
    ctx.restore();
  };

  /**
   * Request animation frame wrapper with polyfill
   * @return {function} Request animation frame method or timeout fallback
   */
  var reqAnimationFrame = (function() {
    return  window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        function(callback) {
          window.setTimeout(callback, 1000 / 60);
        };
  }());

  /**
   * Draw the background of the plugin including the scale and the track
   */
  var drawBackground = function() {
    if(options.scaleColor) drawScale();
    if(options.trackColor) drawCircle(options.trackColor, options.trackWidth || options.lineWidth, 1);
  };

  /**
    * Canvas accessor
   */
  this.getCanvas = function() {
    return canvas;
  };

  /**
    * Canvas 2D context 'ctx' accessor
   */
  this.getCtx = function() {
    return ctx;
  };

  /**
   * Clear the complete canvas
   */
  this.clear = function() {
    ctx.clearRect(options.size / -2, options.size / -2, options.size, options.size);
  };

  /**
   * Draw the complete chart
   * @param {number} percent Percent shown by the chart between -100 and 100
   */
  this.draw = function(percent) {
    // do we need to render a background
    if (!!options.scaleColor || !!options.trackColor) {
      // getImageData and putImageData are supported
      if (ctx.getImageData && ctx.putImageData) {
        if (!cachedBackground) {
          drawBackground();
          cachedBackground = ctx.getImageData(0, 0, options.size * scaleBy, options.size * scaleBy);
        } else {
          ctx.putImageData(cachedBackground, 0, 0);
        }
      } else {
        this.clear();
        drawBackground();
      }
    } else {
      this.clear();
    }

    ctx.lineCap = options.lineCap;

    // if barcolor is a function execute it and pass the percent as a value
    var color;
    if (typeof(options.barColor) === 'function') {
      color = options.barColor(percent);
    } else {
      color = options.barColor;
    }

    // draw bar
    drawCircle(color, options.lineWidth, percent / 100);
  }.bind(this);

  /**
   * Animate from some percent to some other percentage
   * @param {number} from Starting percentage
   * @param {number} to   Final percentage
   */
  this.animate = function(from, to) {
    var startTime = Date.now();
    options.onStart(from, to);
    var animation = function() {
      var process = Math.min(Date.now() - startTime, options.animate.duration);
      var currentValue = options.easing(this, process, from, to - from, options.animate.duration);
      this.draw(currentValue);
      options.onStep(from, to, currentValue);
      if (process >= options.animate.duration) {
        options.onStop(from, to);
      } else {
        reqAnimationFrame(animation);
      }
    }.bind(this);

    reqAnimationFrame(animation);
  }.bind(this);
};

var EasyPieChart = function(el, opts) {
  var defaultOptions = {
    barColor: '#ef1e25',
    trackColor: '#f9f9f9',
    scaleColor: '#dfe0e0',
    scaleLength: 5,
    lineCap: 'round',
    lineWidth: 3,
    trackWidth: undefined,
    size: 110,
    rotate: 0,
    animate: {
      duration: 1000,
      enabled: true
    },
    easing: function (x, t, b, c, d) { // more can be found here: http://gsgd.co.uk/sandbox/jquery/easing/
      t = t / (d/2);
      if (t < 1) {
        return c / 2 * t * t + b;
      }
      return -c/2 * ((--t)*(t-2) - 1) + b;
    },
    onStart: function(from, to) {
      return;
    },
    onStep: function(from, to, currentValue) {
      return;
    },
    onStop: function(from, to) {
      return;
    }
  };

  // detect present renderer
  if (typeof(CanvasRenderer) !== 'undefined') {
    defaultOptions.renderer = CanvasRenderer;
  } else if (typeof(SVGRenderer) !== 'undefined') {
    defaultOptions.renderer = SVGRenderer;
  } else {
    throw new Error('Please load either the SVG- or the CanvasRenderer');
  }

  var options = {};
  var currentValue = 0;

  /**
   * Initialize the plugin by creating the options object and initialize rendering
   */
  var init = function() {
    this.el = el;
    this.options = options;

    // merge user options into default options
    for (var i in defaultOptions) {
      if (defaultOptions.hasOwnProperty(i)) {
        options[i] = opts && typeof(opts[i]) !== 'undefined' ? opts[i] : defaultOptions[i];
        if (typeof(options[i]) === 'function') {
          options[i] = options[i].bind(this);
        }
      }
    }

    // check for jQuery easing
    if (typeof(options.easing) === 'string' && typeof(jQuery) !== 'undefined' && jQuery.isFunction(jQuery.easing[options.easing])) {
      options.easing = jQuery.easing[options.easing];
    } else {
      options.easing = defaultOptions.easing;
    }

    // process earlier animate option to avoid bc breaks
    if (typeof(options.animate) === 'number') {
      options.animate = {
        duration: options.animate,
        enabled: true
      };
    }

    if (typeof(options.animate) === 'boolean' && !options.animate) {
      options.animate = {
        duration: 1000,
        enabled: options.animate
      };
    }

    // create renderer
    this.renderer = new options.renderer(el, options);

    // initial draw
    this.renderer.draw(currentValue);

    // initial update
    if (el.dataset && el.dataset.percent) {
      this.update(parseFloat(el.dataset.percent));
    } else if (el.getAttribute && el.getAttribute('data-percent')) {
      this.update(parseFloat(el.getAttribute('data-percent')));
    }
  }.bind(this);

  /**
   * Update the value of the chart
   * @param  {number} newValue Number between 0 and 100
   * @return {object}          Instance of the plugin for method chaining
   */
  this.update = function(newValue) {
    newValue = parseFloat(newValue);
    if (options.animate.enabled) {
      this.renderer.animate(currentValue, newValue);
    } else {
      this.renderer.draw(newValue);
    }
    currentValue = newValue;
    return this;
  }.bind(this);

  /**
   * Disable animation
   * @return {object} Instance of the plugin for method chaining
   */
  this.disableAnimation = function() {
    options.animate.enabled = false;
    return this;
  };

  /**
   * Enable animation
   * @return {object} Instance of the plugin for method chaining
   */
  this.enableAnimation = function() {
    options.animate.enabled = true;
    return this;
  };

  init();
};

return EasyPieChart;

}));
</script>

 <script>
    var charts = document.querySelectorAll('.chart');
    charts.forEach((chart) => {
      new EasyPieChart(chart, {
          scaleLength: 0,
          barColor: '#F8CE69',
          trackColor: '#E3E8EB',
          lineWidth: 8,
          size: 140,
      });
    })
</script>
