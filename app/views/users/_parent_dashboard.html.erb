<!-- inline css -->

<style>
body {
  background-color: #E3E8EB}
.card-dashboard {
  background-color: white;
  padding: 20px;
  margin-top: 12px;
  text-align: center;
  border-radius: 10px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.2); }
.main-card-dashboard {
  background-color: white;
  padding: 8px;
  margin-top: 12px;
  text-align: center;
  border-radius: 10px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.2); }
.container-dashboard-button {
  display: flex;
  padding: 6px;}
.payout-notification-alert {
  background-color: #E34E53;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  margin-top: 22px;
}
.payout-notification-alert img {
    border-radius: 50%;
  /*  border: 7px solid #E3E8EB;*/
 }
.payout-notification-parent {
  background-color: white;
  padding: 20px;
  margin-top: 12px;
  border-radius: 10px;
}
.icon img {
  width: 16px;
  height: 16px;
}
.notification-icon img {
  width: 50px;
  height: 50px;
  top: -30px;
  left: 150px;
  position: absolute;
  border-radius: 50%;
}
#notification-confirm-button {
  color: white;
}
section {
  background-color: #E34E53;
  background-size: 30% 100%;}
h1 {
  color: #505050 }
h2 {
  color: #505050;
  margin: auto;
  margin-top: 12px;
  margin-left: 12px;
  font-size: 14px;
  font-weight: bold; }
h3 {
  color: #505050;
  margin: auto;
  font-size: 14px;
  font-weight: lighter; }
p {
  color: #505050;
  margin: auto;
  font-size: 14px; }
a {
  color: #505050;
  margin: auto;
  font-size: 14px;
}
.money {
  color: #505050;
  margin: auto;
  font-size: 50px;
  font-weight: lighter;
}
.dashboard-chart-text {
  color: #505050;
  margin-top: 12px;
  margin-left: 0px;
  font-size: 14px;
  font-weight: lighter;
}
.chart-button {
  margin-top: 20px;
}
</style>

<!-- Html -->

<div class="container-main">
  <div class="container-header">
    <!-- Add this line if you need the menu -->
    <div class="header-text">
      <h1 class ="header">Welcome <%= user.first_name %></h1>
    </div>
    <div class="header-avatar">
      <label for="offcanvas" class="toggler"><%= cl_image_tag current_user.avatar, crop: :fill, for: "offcanvas", class: "avatar" %></label>
    </div>
  </div>
   <!-- End  menu -->



  <% if wallets.empty? %>
  <div class="main-card-dashboard">
    <p>This is pretty empty here, let's add your first kid</p>
  </div>
  <% else %>

  <div class="dashboard-scrolling-wrapper ">
    <% wallets.each do |wallet| %>

      <!-- Header Tom -->
      <!-- End Header Tom -->

      <!--  notification div -->

            <% if wallet.payout_amount != 0 %>
               <div class="payout-notification-alert text-left d-flex justify-content-between">
                   <div class="notification-icon">
                      <%= link_to edit_wallet_path(wallet.id) do %>
                      <%= image_tag "notification-icon.jpg" %>
                      <% end %>
                    </div>
                  <h3 style="color: white"> It's paytime! </h3>
                  <%= link_to "confirm", wallet_path(wallet, :wallet => { payout_amount: 0 }), method: :patch, id: "notification-confirm-button"  %>
                </div>
            <% end %>

      <!--  End of notification div -->

      <!-- Pocket Money div -->
      <div class="card-dashboard-scrolling">
        <div class=" payout-notification-parent">
          <div>
            <%= cl_image_tag wallet.kid.avatar, crop: :fill, class: "avatar-kid-dashboard" %>
            <h2><%= wallet.kid.username %>'s upcoming payout:</h2>
         <!--  <h2 class="dashboard-chart-text">Upcoming payout: </h2> -->

          <div class="container-header">
            <h1 class="money"><%= wallet.payout_amount %>$<h1>
          </div>
             <!--      <p>Allowance <%= wallet.total_allowance%> <%= wallet.payout_frequency %> </p> -->
           </div>
           <div class="d-flex justify-content-between align-items-baseline" style="margin-top: 0">
            <div>
              <h2 class="dashboard-chart-text" style="margin-left: 16px;"> <%= wallet.total_allowance%>$ <%= wallet.payout_frequency.downcase %></h2>
            </div>
            <div>
              <% if policy(current_user).dashboard? %>
              <div class="icon">
                <%= link_to edit_wallet_path(wallet.id) do %>
                <%= image_tag "edit.jpg" %>
                <% end %>
              </div>
              <% end %>
            </div>


          </div>
        </div>

        <!-- End of Pocket Money div -->
        <!--  Learning div -->

        <% unless wallet.kid.user_courses.empty? %>
        <% wallet.kid.user_courses.each do |user_course| %>
        <% unless user_course.complete? %>
          <div class="card-dashboard">
            <div class="d-flex justify-content-start">

                  <!-- chart here -->
                <div class="chart" data-percent="<%= @done_percentage_hash[user_course.kid.kid_wallet]%>">
                  <div class="chart-image" style="">
                    <img src="https://www.codecademy.com/webpack/b448a28e23c2912785c2ef6d9e37d4d5.svg" alt="">
                  </div>
                </div>

                <div class="d-flex flex-column justify-content-between learning-stats text-left" style="margin-left: 18px">
                  <div>
                    <h2 style="margin-bottom: 20px; margin-left: 0px; margin-top: 0"><%= user_course.course.name %></h2>
                    <h3 class="chart-text">currently at</h3>
                    <p>Level <%= user_course.last_level %></p>
                  </div>
                  <div style="margin-top: 8px;" class="links">
            <!--         <div class="text-left">
                      <#%= link_to "SEE ALL COURSES >", categories_path %>
                    </div> -->
                  </div>
                </div>
              </div>
            </div>
          <% end %>
          <% end %>
          <% end %>
      <!--  End of Learning div -->

      <!--  Goal div -->
      <% unless wallet.goals.empty? %>
        <div class="card-dashboard d-flex text-left">

          <div class="chart" data-percent="<%= @goal_percentage_hash[wallet]%>">
           <div class="chart-image" style="">
            <img src="<%= wallet.goals.first.picture %>" alt="">
          </div>
        </div>
          <div class="d-flex flex-column justify-content-between learning-stats text-left" style="margin-left: 18px">
            <div>
              <h2 style="margin-bottom: 20px; margin-left: 0px; margin-top: 0"><%= wallet.goals.first.name %>- <%= wallet.goals.first.goal_price %>$</h2>
              <h3 class="chart-text">Saving <%= wallet.goals.first.goal_allowance %>$ <%= wallet.payout_frequency.downcase %></h3>
              <p>  <h3></h3></p>
            </div>
          </div>
        </div>
      <% end %>



      <div class="d-flex justify-content-between"  style="margin-top: 12px;">
        <div class="card-half-width" style="width: 50%; margin-right: 12px;" >
            <% if policy(wallet).edit? %>

              <%= link_to "see more", dashboard_user_path(wallet.kid.id) %>

            <% end %>
        </div>
        <div class="card-half-width" style="width: 50%">
          <% if policy(wallet.kid).destroy? %>

            <%= link_to "close account", destroy_user_path(wallet.kid.id), method: :delete %>

        </div>
      </div>



  </div>
    <% end %>
  <% end %>
  </div>
</div>

<% end %>

<!-- payout notification code from here  -->
<script>
  const payoutNotification = document.querySelector(".payout-notification")
  const confirmButton = document.querySelector(".button-confirm")
  confirmButton.addEventListener("click", () => {
    console.log('test');
    payoutNotification.style.display = "none"
  }
  )
</script>


<!-- progress circle code from here  -->
<script>
  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (root['EasyPieChart'] = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['EasyPieChart'] = factory();
  }
}(this, function () {

/**
 * Renderer to render the chart on a canvas object
 * @param {DOMElement} el      DOM element to host the canvas (root of the plugin)
 * @param {object}     options options object of the plugin
 */
 var CanvasRenderer = function(el, options) {
  var cachedBackground;
  var canvas = document.createElement('canvas');

  el.appendChild(canvas);

  if (typeof(G_vmlCanvasManager) === 'object') {
    G_vmlCanvasManager.initElement(canvas);
  }

  var ctx = canvas.getContext('2d');

  canvas.width = canvas.height = options.size;

  // canvas on retina devices
  var scaleBy = 1;
  if (window.devicePixelRatio > 1) {
    scaleBy = window.devicePixelRatio;
    canvas.style.width = canvas.style.height = [options.size, 'px'].join('');
    canvas.width = canvas.height = options.size * scaleBy;
    ctx.scale(scaleBy, scaleBy);
  }

  // move 0,0 coordinates to the center
  ctx.translate(options.size / 2, options.size / 2);

  // rotate canvas -90deg
  ctx.rotate((-1 / 2 + options.rotate / 180) * Math.PI);

  var radius = (options.size - options.lineWidth) / 2;
  if (options.scaleColor && options.scaleLength) {
    radius -= options.scaleLength + 2; // 2 is the distance between scale and bar
  }

  // IE polyfill for Date
  Date.now = Date.now || function() {
    return +(new Date());
  };

  /**
   * Draw a circle around the center of the canvas
   * @param {strong} color     Valid CSS color string
   * @param {number} lineWidth Width of the line in px
   * @param {number} percent   Percentage to draw (float between -1 and 1)
   */
   var drawCircle = function(color, lineWidth, percent) {
    percent = Math.min(Math.max(-1, percent || 0), 1);
    var isNegative = percent <= 0 ? true : false;

    ctx.beginPath();
    ctx.arc(0, 0, radius, 0, Math.PI * 2 * percent, isNegative);

    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;

    ctx.stroke();
  };

  /**
   * Draw the scale of the chart
   */
   var drawScale = function() {
    var offset;
    var length;

    ctx.lineWidth = 1;
    ctx.fillStyle = options.scaleColor;

    ctx.save();
    for (var i = 24; i > 0; --i) {
      if (i % 6 === 0) {
        length = options.scaleLength;
        offset = 0;
      } else {
        length = options.scaleLength * 0.6;
        offset = options.scaleLength - length;
      }
      ctx.fillRect(-options.size/2 + offset, 0, length, 1);
      ctx.rotate(Math.PI / 12);
    }
    ctx.restore();
  };

  /**
   * Request animation frame wrapper with polyfill
   * @return {function} Request animation frame method or timeout fallback
   */
   var reqAnimationFrame = (function() {
    return  window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    function(callback) {
      window.setTimeout(callback, 1000 / 60);
    };
  }());

  /**
   * Draw the background of the plugin including the scale and the track
   */
   var drawBackground = function() {
    if(options.scaleColor) drawScale();
    if(options.trackColor) drawCircle(options.trackColor, options.trackWidth || options.lineWidth, 1);
  };

  /**
    * Canvas accessor
    */
    this.getCanvas = function() {
      return canvas;
    };

  /**
    * Canvas 2D context 'ctx' accessor
    */
    this.getCtx = function() {
      return ctx;
    };

  /**
   * Clear the complete canvas
   */
   this.clear = function() {
    ctx.clearRect(options.size / -2, options.size / -2, options.size, options.size);
  };

  /**
   * Draw the complete chart
   * @param {number} percent Percent shown by the chart between -100 and 100
   */
   this.draw = function(percent) {
    // do we need to render a background
    if (!!options.scaleColor || !!options.trackColor) {
      // getImageData and putImageData are supported
      if (ctx.getImageData && ctx.putImageData) {
        if (!cachedBackground) {
          drawBackground();
          cachedBackground = ctx.getImageData(0, 0, options.size * scaleBy, options.size * scaleBy);
        } else {
          ctx.putImageData(cachedBackground, 0, 0);
        }
      } else {
        this.clear();
        drawBackground();
      }
    } else {
      this.clear();
    }

    ctx.lineCap = options.lineCap;

    // if barcolor is a function execute it and pass the percent as a value
    var color;
    if (typeof(options.barColor) === 'function') {
      color = options.barColor(percent);
    } else {
      color = options.barColor;
    }

    // draw bar
    drawCircle(color, options.lineWidth, percent / 100);
  }.bind(this);

  /**
   * Animate from some percent to some other percentage
   * @param {number} from Starting percentage
   * @param {number} to   Final percentage
   */
   this.animate = function(from, to) {
    var startTime = Date.now();
    options.onStart(from, to);
    var animation = function() {
      var process = Math.min(Date.now() - startTime, options.animate.duration);
      var currentValue = options.easing(this, process, from, to - from, options.animate.duration);
      this.draw(currentValue);
      options.onStep(from, to, currentValue);
      if (process >= options.animate.duration) {
        options.onStop(from, to);
      } else {
        reqAnimationFrame(animation);
      }
    }.bind(this);

    reqAnimationFrame(animation);
  }.bind(this);
};

var EasyPieChart = function(el, opts) {
  var defaultOptions = {
    barColor: '#ef1e25',
    trackColor: '#f9f9f9',
    scaleColor: '#dfe0e0',
    scaleLength: 5,
    lineCap: 'round',
    lineWidth: 3,
    trackWidth: undefined,
    size: 110,
    rotate: 0,
    animate: {
      duration: 1000,
      enabled: true
    },
    easing: function (x, t, b, c, d) { // more can be found here: http://gsgd.co.uk/sandbox/jquery/easing/
      t = t / (d/2);
      if (t < 1) {
        return c / 2 * t * t + b;
      }
      return -c/2 * ((--t)*(t-2) - 1) + b;
    },
    onStart: function(from, to) {
      return;
    },
    onStep: function(from, to, currentValue) {
      return;
    },
    onStop: function(from, to) {
      return;
    }
  };

  // detect present renderer
  if (typeof(CanvasRenderer) !== 'undefined') {
    defaultOptions.renderer = CanvasRenderer;
  } else if (typeof(SVGRenderer) !== 'undefined') {
    defaultOptions.renderer = SVGRenderer;
  } else {
    throw new Error('Please load either the SVG- or the CanvasRenderer');
  }

  var options = {};
  var currentValue = 0;

  /**
   * Initialize the plugin by creating the options object and initialize rendering
   */
   var init = function() {
    this.el = el;
    this.options = options;

    // merge user options into default options
    for (var i in defaultOptions) {
      if (defaultOptions.hasOwnProperty(i)) {
        options[i] = opts && typeof(opts[i]) !== 'undefined' ? opts[i] : defaultOptions[i];
        if (typeof(options[i]) === 'function') {
          options[i] = options[i].bind(this);
        }
      }
    }

    // check for jQuery easing
    if (typeof(options.easing) === 'string' && typeof(jQuery) !== 'undefined' && jQuery.isFunction(jQuery.easing[options.easing])) {
      options.easing = jQuery.easing[options.easing];
    } else {
      options.easing = defaultOptions.easing;
    }

    // process earlier animate option to avoid bc breaks
    if (typeof(options.animate) === 'number') {
      options.animate = {
        duration: options.animate,
        enabled: true
      };
    }

    if (typeof(options.animate) === 'boolean' && !options.animate) {
      options.animate = {
        duration: 1000,
        enabled: options.animate
      };
    }

    // create renderer
    this.renderer = new options.renderer(el, options);

    // initial draw
    this.renderer.draw(currentValue);

    // initial update
    if (el.dataset && el.dataset.percent) {
      this.update(parseFloat(el.dataset.percent));
    } else if (el.getAttribute && el.getAttribute('data-percent')) {
      this.update(parseFloat(el.getAttribute('data-percent')));
    }
  }.bind(this);

  /**
   * Update the value of the chart
   * @param  {number} newValue Number between 0 and 100
   * @return {object}          Instance of the plugin for method chaining
   */
   this.update = function(newValue) {
    newValue = parseFloat(newValue);
    if (options.animate.enabled) {
      this.renderer.animate(currentValue, newValue);
    } else {
      this.renderer.draw(newValue);
    }
    currentValue = newValue;
    return this;
  }.bind(this);

  /**
   * Disable animation
   * @return {object} Instance of the plugin for method chaining
   */
   this.disableAnimation = function() {
    options.animate.enabled = false;
    return this;
  };

  /**
   * Enable animation
   * @return {object} Instance of the plugin for method chaining
   */
   this.enableAnimation = function() {
    options.animate.enabled = true;
    return this;
  };

  init();
};

return EasyPieChart;

}));
</script>

<script>
  var charts = document.querySelectorAll('.chart');
  charts.forEach((chart) => {
    new EasyPieChart(chart, {
      scaleLength: 0,
      barColor: '#E34E53',
      trackColor: '#E3E8EB',
      lineWidth: 8,
      size: 140,
    });
  })
</script>
