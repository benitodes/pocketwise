<!-- inline css -->

<style>
body {
  background-color: #7FC5BC}
.card-dashboard {
  background-color: white;
  padding: 12px;
  margin-top: 12px;
  text-align: center;
  border-radius: 2px;
   box-shadow: 0 1px 2px rgba(0,0,0,0.2); }
.container-header {
  display: flex;
  border-bottom: :1px white; }
.header {
  margin: auto;
  margin-left: 12px;
  font-size: 16px;
  font-weight: lighter; }
.container-dashboard-button {
  display: flex;
  padding: 6px;}
section {
  background-color: #E34E53;
  background-size: 30% 100%;}
h1 {
  color: white; }
h2 {
  color: #282A2D;
  margin: auto;
  margin-top: 12px;
  margin-left: 12px;
  font-size: 14px;
  font-weight: bold; }
h3 {
  color: #282A2D;
  margin: auto;
  font-size: 12px;
  font-weight: lighter; }
p {
  color: #282A2D;
  margin: auto;
  font-size: 10px; }
a {
  color: #282A2D;
  margin: auto;
  font-size: 10px;
}
.money {
  color: #E34E53;
  margin: auto;
  font-size: 92px;
  font-weight: lighter;
}
.chart-text {
  color: #999999;
  margin-top: 30px;
  margin-left: 0px;
  font-size: 12px;
  font-weight: lighter;
}
.chart-button {
  margin-top: 20px;
}
</style>

<!-- Html -->

<div class="container-main">
<div class="container-header">
  <!-- Add this line if you need the menu -->
    <label for="offcanvas" class="toggler"><%= cl_image_tag current_user.avatar, crop: :fill, for: "offcanvas", class: "avatar" %></label>
      <h1 class ="header">Welcome <%= user.first_name %></h1>
   </div>



    <% if wallets.empty? %>
      <div class="card-dashboard">
        <p>This is pretty empty here, let's add your first kid</p>
      </div>
    <% else %>
      <% wallets.each do |wallet| %>
        <div class="card-dashboard">
        <!-- Header Tom -->
          <div class="container-header">
            <div>
              <%= cl_image_tag wallet.kid.avatar, crop: :fill, class: "avatar-kid" %>
            </div>
            <div>
              <h2><%= wallet.kid.first_name %>'s summary</h2>
            </div>
          </div>
       <!-- End Header Tom -->

      <!--  notification div -->
      <% if wallet.payout_amount != 0 %>
        <div class="payout-notification">
          <div class="d-flex justify-content-between">
            <div class="container-header">
              <h3><%= wallet.kid.username %> completed his exercise, it's paytime! Give <%= wallet.payout_amount %>â‚¬ to him/her. </h3>
            </div>
            <div>
              <%= link_to "confirm", wallet_path(wallet, :wallet => { payout_amount: 0 }), method: :patch %>

              <button class= "button-red button-confirm"> CONFIRM </button>
            </div>
          </div>
        </div>
      <% end %>
      <!--  End of notification div -->

      <!-- Pocket Money div -->
          <div>
            <div class="card-dashboard d-flex align-middle justify-content-around border-top">
              <div>
                <h1 class="money"><%= wallet.total_allowance%> <%= wallet.payout_amount %><h1>
              </div>
              <div>
                   <h2 class="chart-text"><%= wallet.payout_frequency %></h2>
                   <% if policy(current_user).dashboard? %>
                     <div class="chart-button">
                       <%= link_to "EDIT", edit_wallet_path(wallet.id), class: "button-white" %>
                     </div>
                   <% end %>
              </div>
            </div>
      <!-- End of Pocket Money div -->


      <!--  Learning div -->

      <% unless wallet.kid.user_courses.empty? %>
        <% wallet.kid.user_courses.each do |user_course| %>
          <% unless user_course.complete? %>
           <div class="col">
              <h2>Learning progress</h2>
            </div>
          <div class="card-dashboard d-flex align-middle justify-content-around border-top">
            <div class="col">
               <div class="chart" data-percent="<%= @done_percentage %>"></div>
            </div>
            <div class="col">
              <h3 class="chart-text"><%= user_course.kid.first_name %> is learning <%= user_course.course.name %></h3>
            </div>
          <% end %>
        <% end %>
    <% end %>
    </div>
      <!--  End of Learning div -->

      <!--  Goal div -->
        <div class="col">
          <h2>Saving progress</h2>
        </div>
        <% unless wallet.goals.empty? %>
          <div class="card-dashboard d-flex justify-content-around border-top">

          <div  class="col">
            <div class="chart" data-percent="<%= @goal_percentage %>"></div>
          </div>
          <div  class="col">
            <h3 class="chart-text"><%= wallet.kid.first_name %> is saving <%= wallet.goals.first.goal_allowance %>$ <%= wallet.payout_frequency %> to buy a <%= wallet.goals.first.name %></h3>
          </div>

        <% end %>
        </div>
        <div class="d-flex justify-content-around border-top">
          <% if policy(wallet).edit? %>
            <div class="container-dashboard-button">
                <%= link_to "SEE DASHBOARD", dashboard_user_path(wallet.kid.id), class: "button-white" %>
              </div>
            <% end %>
            <% if policy(wallet.kid).destroy? %>
              <div class="container-dashboard-button">
                <%= link_to "DELETE KID", destroy_user_path(wallet.kid.id), method: :delete, class: "button-white" %>
              </div>
            <% end %>
         </div>
        </div>
      </div>
    <% end %>
  <% end %>
</div>

    <div class="container-dashboard-button">
      <%= link_to "ADD NEW KID", new_user_path, class: "button-white" %>
    </div>
</div> <!-- container main closing -->


<!-- payout notification code from here  -->
<script>
  const payoutNotification = document.querySelector(".payout-notification")
  const confirmButton = document.querySelector(".button-confirm")
  confirmButton.addEventListener("click", () => {
    console.log('test');
        payoutNotification.style.display = "none"
      }
  )
</script>


<!-- progress circle code from here  -->
<script>
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (root['EasyPieChart'] = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['EasyPieChart'] = factory();
  }
}(this, function () {

/**
 * Renderer to render the chart on a canvas object
 * @param {DOMElement} el      DOM element to host the canvas (root of the plugin)
 * @param {object}     options options object of the plugin
 */
var CanvasRenderer = function(el, options) {
  var cachedBackground;
  var canvas = document.createElement('canvas');

  el.appendChild(canvas);

  if (typeof(G_vmlCanvasManager) === 'object') {
    G_vmlCanvasManager.initElement(canvas);
  }

  var ctx = canvas.getContext('2d');

  canvas.width = canvas.height = options.size;

  // canvas on retina devices
  var scaleBy = 1;
  if (window.devicePixelRatio > 1) {
    scaleBy = window.devicePixelRatio;
    canvas.style.width = canvas.style.height = [options.size, 'px'].join('');
    canvas.width = canvas.height = options.size * scaleBy;
    ctx.scale(scaleBy, scaleBy);
  }

  // move 0,0 coordinates to the center
  ctx.translate(options.size / 2, options.size / 2);

  // rotate canvas -90deg
  ctx.rotate((-1 / 2 + options.rotate / 180) * Math.PI);

  var radius = (options.size - options.lineWidth) / 2;
  if (options.scaleColor && options.scaleLength) {
    radius -= options.scaleLength + 2; // 2 is the distance between scale and bar
  }

  // IE polyfill for Date
  Date.now = Date.now || function() {
    return +(new Date());
  };

  /**
   * Draw a circle around the center of the canvas
   * @param {strong} color     Valid CSS color string
   * @param {number} lineWidth Width of the line in px
   * @param {number} percent   Percentage to draw (float between -1 and 1)
   */
  var drawCircle = function(color, lineWidth, percent) {
    percent = Math.min(Math.max(-1, percent || 0), 1);
    var isNegative = percent <= 0 ? true : false;

    ctx.beginPath();
    ctx.arc(0, 0, radius, 0, Math.PI * 2 * percent, isNegative);

    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;

    ctx.stroke();
  };

  /**
   * Draw the scale of the chart
   */
  var drawScale = function() {
    var offset;
    var length;

    ctx.lineWidth = 1;
    ctx.fillStyle = options.scaleColor;

    ctx.save();
    for (var i = 24; i > 0; --i) {
      if (i % 6 === 0) {
        length = options.scaleLength;
        offset = 0;
      } else {
        length = options.scaleLength * 0.6;
        offset = options.scaleLength - length;
      }
      ctx.fillRect(-options.size/2 + offset, 0, length, 1);
      ctx.rotate(Math.PI / 12);
    }
    ctx.restore();
  };

  /**
   * Request animation frame wrapper with polyfill
   * @return {function} Request animation frame method or timeout fallback
   */
  var reqAnimationFrame = (function() {
    return  window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        function(callback) {
          window.setTimeout(callback, 1000 / 60);
        };
  }());

  /**
   * Draw the background of the plugin including the scale and the track
   */
  var drawBackground = function() {
    if(options.scaleColor) drawScale();
    if(options.trackColor) drawCircle(options.trackColor, options.trackWidth || options.lineWidth, 1);
  };

  /**
    * Canvas accessor
   */
  this.getCanvas = function() {
    return canvas;
  };

  /**
    * Canvas 2D context 'ctx' accessor
   */
  this.getCtx = function() {
    return ctx;
  };

  /**
   * Clear the complete canvas
   */
  this.clear = function() {
    ctx.clearRect(options.size / -2, options.size / -2, options.size, options.size);
  };

  /**
   * Draw the complete chart
   * @param {number} percent Percent shown by the chart between -100 and 100
   */
  this.draw = function(percent) {
    // do we need to render a background
    if (!!options.scaleColor || !!options.trackColor) {
      // getImageData and putImageData are supported
      if (ctx.getImageData && ctx.putImageData) {
        if (!cachedBackground) {
          drawBackground();
          cachedBackground = ctx.getImageData(0, 0, options.size * scaleBy, options.size * scaleBy);
        } else {
          ctx.putImageData(cachedBackground, 0, 0);
        }
      } else {
        this.clear();
        drawBackground();
      }
    } else {
      this.clear();
    }

    ctx.lineCap = options.lineCap;

    // if barcolor is a function execute it and pass the percent as a value
    var color;
    if (typeof(options.barColor) === 'function') {
      color = options.barColor(percent);
    } else {
      color = options.barColor;
    }

    // draw bar
    drawCircle(color, options.lineWidth, percent / 100);
  }.bind(this);

  /**
   * Animate from some percent to some other percentage
   * @param {number} from Starting percentage
   * @param {number} to   Final percentage
   */
  this.animate = function(from, to) {
    var startTime = Date.now();
    options.onStart(from, to);
    var animation = function() {
      var process = Math.min(Date.now() - startTime, options.animate.duration);
      var currentValue = options.easing(this, process, from, to - from, options.animate.duration);
      this.draw(currentValue);
      options.onStep(from, to, currentValue);
      if (process >= options.animate.duration) {
        options.onStop(from, to);
      } else {
        reqAnimationFrame(animation);
      }
    }.bind(this);

    reqAnimationFrame(animation);
  }.bind(this);
};

var EasyPieChart = function(el, opts) {
  var defaultOptions = {
    barColor: '#ef1e25',
    trackColor: '#f9f9f9',
    scaleColor: '#dfe0e0',
    scaleLength: 5,
    lineCap: 'round',
    lineWidth: 3,
    trackWidth: undefined,
    size: 110,
    rotate: 0,
    animate: {
      duration: 1000,
      enabled: true
    },
    easing: function (x, t, b, c, d) { // more can be found here: http://gsgd.co.uk/sandbox/jquery/easing/
      t = t / (d/2);
      if (t < 1) {
        return c / 2 * t * t + b;
      }
      return -c/2 * ((--t)*(t-2) - 1) + b;
    },
    onStart: function(from, to) {
      return;
    },
    onStep: function(from, to, currentValue) {
      return;
    },
    onStop: function(from, to) {
      return;
    }
  };

  // detect present renderer
  if (typeof(CanvasRenderer) !== 'undefined') {
    defaultOptions.renderer = CanvasRenderer;
  } else if (typeof(SVGRenderer) !== 'undefined') {
    defaultOptions.renderer = SVGRenderer;
  } else {
    throw new Error('Please load either the SVG- or the CanvasRenderer');
  }

  var options = {};
  var currentValue = 0;

  /**
   * Initialize the plugin by creating the options object and initialize rendering
   */
  var init = function() {
    this.el = el;
    this.options = options;

    // merge user options into default options
    for (var i in defaultOptions) {
      if (defaultOptions.hasOwnProperty(i)) {
        options[i] = opts && typeof(opts[i]) !== 'undefined' ? opts[i] : defaultOptions[i];
        if (typeof(options[i]) === 'function') {
          options[i] = options[i].bind(this);
        }
      }
    }

    // check for jQuery easing
    if (typeof(options.easing) === 'string' && typeof(jQuery) !== 'undefined' && jQuery.isFunction(jQuery.easing[options.easing])) {
      options.easing = jQuery.easing[options.easing];
    } else {
      options.easing = defaultOptions.easing;
    }

    // process earlier animate option to avoid bc breaks
    if (typeof(options.animate) === 'number') {
      options.animate = {
        duration: options.animate,
        enabled: true
      };
    }

    if (typeof(options.animate) === 'boolean' && !options.animate) {
      options.animate = {
        duration: 1000,
        enabled: options.animate
      };
    }

    // create renderer
    this.renderer = new options.renderer(el, options);

    // initial draw
    this.renderer.draw(currentValue);

    // initial update
    if (el.dataset && el.dataset.percent) {
      this.update(parseFloat(el.dataset.percent));
    } else if (el.getAttribute && el.getAttribute('data-percent')) {
      this.update(parseFloat(el.getAttribute('data-percent')));
    }
  }.bind(this);

  /**
   * Update the value of the chart
   * @param  {number} newValue Number between 0 and 100
   * @return {object}          Instance of the plugin for method chaining
   */
  this.update = function(newValue) {
    newValue = parseFloat(newValue);
    if (options.animate.enabled) {
      this.renderer.animate(currentValue, newValue);
    } else {
      this.renderer.draw(newValue);
    }
    currentValue = newValue;
    return this;
  }.bind(this);

  /**
   * Disable animation
   * @return {object} Instance of the plugin for method chaining
   */
  this.disableAnimation = function() {
    options.animate.enabled = false;
    return this;
  };

  /**
   * Enable animation
   * @return {object} Instance of the plugin for method chaining
   */
  this.enableAnimation = function() {
    options.animate.enabled = true;
    return this;
  };

  init();
};

return EasyPieChart;

}));
</script>

 <script>
    var charts = document.querySelectorAll('.chart');
    charts.forEach((chart) => {
      new EasyPieChart(chart, {
          scaleLength: 0,
          barColor: '#ef1e25',
          lineWidth: 8,
          size: 110,
      });
    })
</script>
